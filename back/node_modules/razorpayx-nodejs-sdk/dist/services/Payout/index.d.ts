import { GenericFields, Pageable, Response } from "../../types/generic";
import RestClient from "../../utils/RestClient";
import { Contact } from "../Contact";
export interface Payout extends Omit<GenericFields, "active"> {
    entity: "payout";
    account_number?: string;
    fund_account_id: Contact["id"];
    /** Amount in paise */
    amount: number;
    currency: "INR";
    notes?: Record<string, string>;
    fees?: number;
    tax?: number;
    status: "queued" | "pending" | "rejected" | "processing" | "processed" | "cancelled" | "reversed";
    utr: string;
    mode: "UPI" | "NEFT" | "RTGS" | "IMPS" | "card";
    purpose?: "refund" | "cashback" | "payout" | "salary" | "utility bill" | "vendor bill" | string;
    reference_id?: string;
    narration?: string;
    status_details?: {
        source?: string;
        reason?: string;
        description?: string;
    };
}
declare class RPXPayout {
    client: RestClient;
    constructor(client: RestClient);
    /**
     * Creates a payout for the given details
     * @link https://razorpay.com/docs/api/x/payouts/#create-a-payout
     */
    create(payoutInfo: Pick<Payout, "account_number" | "fund_account_id" | "amount" | "currency" | "mode" | "purpose" | "reference_id" | "narration" | "notes"> & {
        queue_if_low_balance?: boolean;
    }): Promise<Payout>;
    /**
     * Fetches all payout
     * @link https://razorpay.com/docs/api/x/payouts/#fetch-all-payouts
     */
    getAll(accountNumber: Payout["account_number"], filter?: Pageable & Partial<Pick<Payout, "fund_account_id" | "mode" | "reference_id" | "status">> & {
        contact_id?: string;
    }): Promise<Response<Payout>>;
    /**
     * Fetch details of a payout
     * @link https://razorpay.com/docs/api/x/payouts/#fetch-a-payout-by-id
     */
    get(payoutId: Payout["id"]): Promise<Payout>;
    /**
     * Cancels the payout for given payoutId
     * @link https://razorpay.com/docs/api/x/payouts/#cancel-a-queued-payout
     */
    cancel(payoutId: Payout["id"]): Promise<void>;
}
export default RPXPayout;

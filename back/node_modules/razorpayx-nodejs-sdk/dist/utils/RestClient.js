"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
class RestClient {
    constructor(options) {
        this.key = options.key;
        this.secret = options.secret;
        this.baseURL = options.baseURL || "https://api.razorpay.com/v1";
        return this;
    }
    /**
     * Calls api from the razorpay for given service
     * @example <caption>"/fund_accounts/validations", "POST", {id: "account_id"}</caption>
     * @param {service} url - url of the service
     * @param {method} method - method (GET, UPDATE, DELETE, POST, PATCH)
     * @param {object} params - params to be send in the API (Optional)
     * @param {AxiosRequestConfig} options - axios config object (Optional)
     */
    load(url, method = "GET", params = {}, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = `Basic ${Buffer.from(this.key + ":" + this.secret).toString("base64")}`;
            const config = Object.assign(Object.assign({}, options), { baseURL: this.baseURL, method, headers: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.headers), { Authorization: token }), data: method.toLowerCase() !== "get" ? params : undefined, params: method.toLowerCase() === "get" ? params : undefined });
            try {
                return (yield (0, axios_1.default)(url, config)).data;
            }
            catch (error) {
                throw error.response || error;
            }
        });
    }
}
exports.default = RestClient;
